package tbmodels

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Event) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "k":
			err = z.EventKey.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "EventKey")
				return
			}
		case "e":
			z.EventID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "EventID")
				return
			}
		case "c":
			z.CompetitionID, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "CompetitionID")
				return
			}
		case "n":
			z.CompetitionName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "CompetitionName")
				return
			}
		case "y":
			z.Country, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Country")
				return
			}
		case "h":
			z.Home, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Home")
				return
			}
		case "a":
			z.Away, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Away")
				return
			}
		case "o":
			z.Offline, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Offline")
				return
			}
		case "t":
			z.Starts, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "Starts")
				return
			}
		case "ir":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "IrStatus")
					return
				}
				z.IrStatus = nil
			} else {
				var zb0002 uint32
				zb0002, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "IrStatus")
					return
				}
				if z.IrStatus == nil {
					z.IrStatus = make(map[string]interface{}, zb0002)
				} else if len(z.IrStatus) > 0 {
					for key := range z.IrStatus {
						delete(z.IrStatus, key)
					}
				}
				for zb0002 > 0 {
					zb0002--
					var za0001 string
					var za0002 interface{}
					za0001, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "IrStatus")
						return
					}
					za0002, err = dc.ReadIntf()
					if err != nil {
						err = msgp.WrapError(err, "IrStatus", za0001)
						return
					}
					z.IrStatus[za0001] = za0002
				}
			}
		case "et":
			z.EventType, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "EventType")
				return
			}
		case "en":
			z.EventName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "EventName")
				return
			}
		case "b":
			z.AvailableForAccas, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "AvailableForAccas")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Event) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 13
	// write "k"
	err = en.Append(0x8d, 0xa1, 0x6b)
	if err != nil {
		return
	}
	err = z.EventKey.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "EventKey")
		return
	}
	// write "e"
	err = en.Append(0xa1, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.EventID)
	if err != nil {
		err = msgp.WrapError(err, "EventID")
		return
	}
	// write "c"
	err = en.Append(0xa1, 0x63)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.CompetitionID)
	if err != nil {
		err = msgp.WrapError(err, "CompetitionID")
		return
	}
	// write "n"
	err = en.Append(0xa1, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.CompetitionName)
	if err != nil {
		err = msgp.WrapError(err, "CompetitionName")
		return
	}
	// write "y"
	err = en.Append(0xa1, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.Country)
	if err != nil {
		err = msgp.WrapError(err, "Country")
		return
	}
	// write "h"
	err = en.Append(0xa1, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.Home)
	if err != nil {
		err = msgp.WrapError(err, "Home")
		return
	}
	// write "a"
	err = en.Append(0xa1, 0x61)
	if err != nil {
		return
	}
	err = en.WriteString(z.Away)
	if err != nil {
		err = msgp.WrapError(err, "Away")
		return
	}
	// write "o"
	err = en.Append(0xa1, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Offline)
	if err != nil {
		err = msgp.WrapError(err, "Offline")
		return
	}
	// write "t"
	err = en.Append(0xa1, 0x74)
	if err != nil {
		return
	}
	err = en.WriteTime(z.Starts)
	if err != nil {
		err = msgp.WrapError(err, "Starts")
		return
	}
	// write "ir"
	err = en.Append(0xa2, 0x69, 0x72)
	if err != nil {
		return
	}
	if z.IrStatus == nil { // allownil: if nil
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteMapHeader(uint32(len(z.IrStatus)))
		if err != nil {
			err = msgp.WrapError(err, "IrStatus")
			return
		}
		for za0001, za0002 := range z.IrStatus {
			err = en.WriteString(za0001)
			if err != nil {
				err = msgp.WrapError(err, "IrStatus")
				return
			}
			err = en.WriteIntf(za0002)
			if err != nil {
				err = msgp.WrapError(err, "IrStatus", za0001)
				return
			}
		}
	}
	// write "et"
	err = en.Append(0xa2, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.EventType)
	if err != nil {
		err = msgp.WrapError(err, "EventType")
		return
	}
	// write "en"
	err = en.Append(0xa2, 0x65, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.EventName)
	if err != nil {
		err = msgp.WrapError(err, "EventName")
		return
	}
	// write "b"
	err = en.Append(0xa1, 0x62)
	if err != nil {
		return
	}
	err = en.WriteBool(z.AvailableForAccas)
	if err != nil {
		err = msgp.WrapError(err, "AvailableForAccas")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Event) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 13
	// string "k"
	o = append(o, 0x8d, 0xa1, 0x6b)
	o, err = z.EventKey.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "EventKey")
		return
	}
	// string "e"
	o = append(o, 0xa1, 0x65)
	o = msgp.AppendString(o, z.EventID)
	// string "c"
	o = append(o, 0xa1, 0x63)
	o = msgp.AppendInt32(o, z.CompetitionID)
	// string "n"
	o = append(o, 0xa1, 0x6e)
	o = msgp.AppendString(o, z.CompetitionName)
	// string "y"
	o = append(o, 0xa1, 0x79)
	o = msgp.AppendString(o, z.Country)
	// string "h"
	o = append(o, 0xa1, 0x68)
	o = msgp.AppendString(o, z.Home)
	// string "a"
	o = append(o, 0xa1, 0x61)
	o = msgp.AppendString(o, z.Away)
	// string "o"
	o = append(o, 0xa1, 0x6f)
	o = msgp.AppendBool(o, z.Offline)
	// string "t"
	o = append(o, 0xa1, 0x74)
	o = msgp.AppendTime(o, z.Starts)
	// string "ir"
	o = append(o, 0xa2, 0x69, 0x72)
	if z.IrStatus == nil { // allownil: if nil
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendMapHeader(o, uint32(len(z.IrStatus)))
		for za0001, za0002 := range z.IrStatus {
			o = msgp.AppendString(o, za0001)
			o, err = msgp.AppendIntf(o, za0002)
			if err != nil {
				err = msgp.WrapError(err, "IrStatus", za0001)
				return
			}
		}
	}
	// string "et"
	o = append(o, 0xa2, 0x65, 0x74)
	o = msgp.AppendString(o, z.EventType)
	// string "en"
	o = append(o, 0xa2, 0x65, 0x6e)
	o = msgp.AppendString(o, z.EventName)
	// string "b"
	o = append(o, 0xa1, 0x62)
	o = msgp.AppendBool(o, z.AvailableForAccas)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Event) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "k":
			bts, err = z.EventKey.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "EventKey")
				return
			}
		case "e":
			z.EventID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "EventID")
				return
			}
		case "c":
			z.CompetitionID, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CompetitionID")
				return
			}
		case "n":
			z.CompetitionName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CompetitionName")
				return
			}
		case "y":
			z.Country, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Country")
				return
			}
		case "h":
			z.Home, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Home")
				return
			}
		case "a":
			z.Away, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Away")
				return
			}
		case "o":
			z.Offline, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Offline")
				return
			}
		case "t":
			z.Starts, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Starts")
				return
			}
		case "ir":
			if msgp.IsNil(bts) {
				bts = bts[1:]
				z.IrStatus = nil
			} else {
				var zb0002 uint32
				zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "IrStatus")
					return
				}
				if z.IrStatus == nil {
					z.IrStatus = make(map[string]interface{}, zb0002)
				} else if len(z.IrStatus) > 0 {
					for key := range z.IrStatus {
						delete(z.IrStatus, key)
					}
				}
				for zb0002 > 0 {
					var za0001 string
					var za0002 interface{}
					zb0002--
					za0001, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "IrStatus")
						return
					}
					za0002, bts, err = msgp.ReadIntfBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "IrStatus", za0001)
						return
					}
					z.IrStatus[za0001] = za0002
				}
			}
		case "et":
			z.EventType, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "EventType")
				return
			}
		case "en":
			z.EventName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "EventName")
				return
			}
		case "b":
			z.AvailableForAccas, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AvailableForAccas")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Event) Msgsize() (s int) {
	s = 1 + 2 + z.EventKey.Msgsize() + 2 + msgp.StringPrefixSize + len(z.EventID) + 2 + msgp.Int32Size + 2 + msgp.StringPrefixSize + len(z.CompetitionName) + 2 + msgp.StringPrefixSize + len(z.Country) + 2 + msgp.StringPrefixSize + len(z.Home) + 2 + msgp.StringPrefixSize + len(z.Away) + 2 + msgp.BoolSize + 2 + msgp.TimeSize + 3 + msgp.MapHeaderSize
	if z.IrStatus != nil {
		for za0001, za0002 := range z.IrStatus {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.GuessSize(za0002)
		}
	}
	s += 3 + msgp.StringPrefixSize + len(z.EventType) + 3 + msgp.StringPrefixSize + len(z.EventName) + 2 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *EventDB) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "k":
			err = z.EventKey.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "EventKey")
				return
			}
		case "y":
			z.Country, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Country")
				return
			}
		case "c":
			z.CompetitionID, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "CompetitionID")
				return
			}
		case "i":
			z.ID, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "t":
			z.Starts, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "Starts")
				return
			}
		case "o":
			z.Offline, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Offline")
				return
			}
		case "l":
			z.Live, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Live")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *EventDB) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "k"
	err = en.Append(0x87, 0xa1, 0x6b)
	if err != nil {
		return
	}
	err = z.EventKey.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "EventKey")
		return
	}
	// write "y"
	err = en.Append(0xa1, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.Country)
	if err != nil {
		err = msgp.WrapError(err, "Country")
		return
	}
	// write "c"
	err = en.Append(0xa1, 0x63)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.CompetitionID)
	if err != nil {
		err = msgp.WrapError(err, "CompetitionID")
		return
	}
	// write "i"
	err = en.Append(0xa1, 0x69)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "t"
	err = en.Append(0xa1, 0x74)
	if err != nil {
		return
	}
	err = en.WriteTime(z.Starts)
	if err != nil {
		err = msgp.WrapError(err, "Starts")
		return
	}
	// write "o"
	err = en.Append(0xa1, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Offline)
	if err != nil {
		err = msgp.WrapError(err, "Offline")
		return
	}
	// write "l"
	err = en.Append(0xa1, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Live)
	if err != nil {
		err = msgp.WrapError(err, "Live")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *EventDB) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "k"
	o = append(o, 0x87, 0xa1, 0x6b)
	o, err = z.EventKey.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "EventKey")
		return
	}
	// string "y"
	o = append(o, 0xa1, 0x79)
	o = msgp.AppendString(o, z.Country)
	// string "c"
	o = append(o, 0xa1, 0x63)
	o = msgp.AppendInt32(o, z.CompetitionID)
	// string "i"
	o = append(o, 0xa1, 0x69)
	o = msgp.AppendInt32(o, z.ID)
	// string "t"
	o = append(o, 0xa1, 0x74)
	o = msgp.AppendTime(o, z.Starts)
	// string "o"
	o = append(o, 0xa1, 0x6f)
	o = msgp.AppendBool(o, z.Offline)
	// string "l"
	o = append(o, 0xa1, 0x6c)
	o = msgp.AppendBool(o, z.Live)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EventDB) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "k":
			bts, err = z.EventKey.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "EventKey")
				return
			}
		case "y":
			z.Country, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Country")
				return
			}
		case "c":
			z.CompetitionID, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CompetitionID")
				return
			}
		case "i":
			z.ID, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "t":
			z.Starts, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Starts")
				return
			}
		case "o":
			z.Offline, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Offline")
				return
			}
		case "l":
			z.Live, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Live")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *EventDB) Msgsize() (s int) {
	s = 1 + 2 + z.EventKey.Msgsize() + 2 + msgp.StringPrefixSize + len(z.Country) + 2 + msgp.Int32Size + 2 + msgp.Int32Size + 2 + msgp.TimeSize + 2 + msgp.BoolSize + 2 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *EventDBList) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "e":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Events")
				return
			}
			if cap(z.Events) >= int(zb0002) {
				z.Events = (z.Events)[:zb0002]
			} else {
				z.Events = make([]EventDB, zb0002)
			}
			for za0001 := range z.Events {
				err = z.Events[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Events", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *EventDBList) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "e"
	err = en.Append(0x81, 0xa1, 0x65)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Events)))
	if err != nil {
		err = msgp.WrapError(err, "Events")
		return
	}
	for za0001 := range z.Events {
		err = z.Events[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Events", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *EventDBList) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "e"
	o = append(o, 0x81, 0xa1, 0x65)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Events)))
	for za0001 := range z.Events {
		o, err = z.Events[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Events", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EventDBList) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "e":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Events")
				return
			}
			if cap(z.Events) >= int(zb0002) {
				z.Events = (z.Events)[:zb0002]
			} else {
				z.Events = make([]EventDB, zb0002)
			}
			for za0001 := range z.Events {
				bts, err = z.Events[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Events", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *EventDBList) Msgsize() (s int) {
	s = 1 + 2 + msgp.ArrayHeaderSize
	for za0001 := range z.Events {
		s += z.Events[za0001].Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *EventKey) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "h":
			z.HomeID, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "HomeID")
				return
			}
		case "a":
			z.AwayID, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "AwayID")
				return
			}
		case "d":
			z.EventDate, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "EventDate")
				return
			}
		case "s":
			z.Sport, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Sport")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *EventKey) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "h"
	err = en.Append(0x84, 0xa1, 0x68)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.HomeID)
	if err != nil {
		err = msgp.WrapError(err, "HomeID")
		return
	}
	// write "a"
	err = en.Append(0xa1, 0x61)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.AwayID)
	if err != nil {
		err = msgp.WrapError(err, "AwayID")
		return
	}
	// write "d"
	err = en.Append(0xa1, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.EventDate)
	if err != nil {
		err = msgp.WrapError(err, "EventDate")
		return
	}
	// write "s"
	err = en.Append(0xa1, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.Sport)
	if err != nil {
		err = msgp.WrapError(err, "Sport")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *EventKey) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "h"
	o = append(o, 0x84, 0xa1, 0x68)
	o = msgp.AppendInt32(o, z.HomeID)
	// string "a"
	o = append(o, 0xa1, 0x61)
	o = msgp.AppendInt32(o, z.AwayID)
	// string "d"
	o = append(o, 0xa1, 0x64)
	o = msgp.AppendInt32(o, z.EventDate)
	// string "s"
	o = append(o, 0xa1, 0x73)
	o = msgp.AppendString(o, z.Sport)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EventKey) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "h":
			z.HomeID, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "HomeID")
				return
			}
		case "a":
			z.AwayID, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AwayID")
				return
			}
		case "d":
			z.EventDate, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "EventDate")
				return
			}
		case "s":
			z.Sport, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Sport")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *EventKey) Msgsize() (s int) {
	s = 1 + 2 + msgp.Int32Size + 2 + msgp.Int32Size + 2 + msgp.Int32Size + 2 + msgp.StringPrefixSize + len(z.Sport)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *EventWatch) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "c":
			z.CompetitionID, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "CompetitionID")
				return
			}
		case "k":
			err = z.EventKey.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "EventKey")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *EventWatch) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "c"
	err = en.Append(0x82, 0xa1, 0x63)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.CompetitionID)
	if err != nil {
		err = msgp.WrapError(err, "CompetitionID")
		return
	}
	// write "k"
	err = en.Append(0xa1, 0x6b)
	if err != nil {
		return
	}
	err = z.EventKey.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "EventKey")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *EventWatch) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "c"
	o = append(o, 0x82, 0xa1, 0x63)
	o = msgp.AppendInt32(o, z.CompetitionID)
	// string "k"
	o = append(o, 0xa1, 0x6b)
	o, err = z.EventKey.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "EventKey")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EventWatch) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "c":
			z.CompetitionID, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CompetitionID")
				return
			}
		case "k":
			bts, err = z.EventKey.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "EventKey")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *EventWatch) Msgsize() (s int) {
	s = 1 + 2 + msgp.Int32Size + 2 + z.EventKey.Msgsize()
	return
}
